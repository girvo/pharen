(ns pharen.repl)
(use pharen.path as path)
(define "REPL_SYSTEM" (realpath (dirname __FILE__)))
(define "PHAREN_SYSTEM" (path.join REPL-SYSTEM "../../"))

(require-once (. PHAREN_SYSTEM "/pharen.php"))

(def greetings ["Maybe solve P v NP!" "Happy Pharening!" "(map) new worlds!"
                "Maybe solve Hello World!" "Curly fries are delicious and cheap!"])

(fn get-file-vars (file vars)
  (include-once file)
  (array-diff-key (get-defined-vars) vars))

(fn starts-with (needle haystack)
  (== (substr haystack 0 (strlen needle)) needle))

(fn get-needle (input)
  (let [point (:(readline-info) "point")
        up-to-point (substr input 0 point)
        last-pound (strrpos up-to-point "#")]
    (if (not (false? last-pound))
      (substr up-to-point (inc last-pound))
      input)))

(fn prepend-chars (needle funcs)
  (if-not (false? (strpos needle "#"))
    (map (lambda (func)
                 (. "#" func))
         funcs)
    funcs))

(fn strip-ns (funcs)
  (map (lambda (func)
               (str-replace (. (:: .RootNode ns) "\\") "" func))
       funcs))

(fn pharen-complete-func (input)
  (let [all-funcs (get-defined-functions)
        needle (get-needle input)
        starts-with-input (starts-with needle)
        internal-matches (prepend-chars input (filter starts-with-input (strip-ns (:all-funcs "internal"))))
        user-matches (prepend-chars input (filter starts-with-input (strip-ns (:all-funcs "user"))))]
    (arr (concat user-matches internal-matches))))

(if (function-exists "readline")
  (do
    (fn prompt (prompt)
      (let [line (trim (readline prompt))]
        (readline-add-history line)
        line))
    (readline-completion-function #pharen-complete-func))
  (fn prompt (prompt)
    (fwrite STDOUT prompt)
    (trim (fgets STDIN))))

(fn get-prompt (expecting)
  (let [suffix (if expecting "... " "> ")]
    (if-let [ns (:: .RootNode raw-ns)]
        (. ns suffix)
        (. "pharen" suffix))))

(fn add-uses (code)
  (let [use-str (if-let [uses (get (:: .RootNode ns) (:: .RootNode pharen-uses))]
                  (reduce-to-str 
                    (lambda (ns)
                            (if (== (count ns) 2)
                              (. "(use " (:ns 0) " as " (:ns 1) ")\n")
                              (. "(use " (:ns 0) ")\n")))
                    uses)
                  "")]
    (. use-str code)))

(fn fmt-result (x)
  (let [result (cond
                ((=== NULL x) "Null")
                ((=== TRUE x) "True")
                ((=== FALSE x) "False")
                ((is-object x) (if (method-exists x "__toString") x (. "<" (get-class x) ">")))
                ((is-string x) (. "\"" x "\""))
                (TRUE x))]
    (if (< 80 (strlen result))
      (. (substr result 0 80) "...")
      result)))

(fn phpfy-ns (ns)
  (str-replace "-" "_" (str-replace "." "_" ns)))

(fn wrap-compile (code)
  (if (=== (trim code) "")
    ""
    (let [embedded-code (. "(local *1 " code ") (return *1)")
          raw-ns (:: .RootNode raw-ns)
          final-code (add-uses embedded-code)]
      (compile final-code NULL (phpfy-ns raw-ns) (:: .RootNode last-scope)
               "<repl>" FALSE))))

(fn compile-code (code)
  (local compiled-code (wrap-compile code))
  (if-not (false? compiled-code)
    compiled-code
    FALSE))

(fn intro ()
  (. "Initialized Pharen REPL. " (:greetings (array-rand (arr greetings))) "\n"))

(fn work ([previous-code ""] [repl-vars []] [prompt #prompt] [prn-result #prn])
  (let [code (. previous-code " " ($prompt (get-prompt previous-code)))]
    (if (== (trim code) "quit")
      FALSE
      (let [compiled-code (compile-code code)]
        (if-not (false? compiled-code)
          (do 
            (extract repl-vars)
            ($prn-result (fmt-result (eval (. "?>" compiled-code))))
            (local previous-code ""))
          (local previous-code code))
        (work previous-code repl-vars prompt prn-result)))))
